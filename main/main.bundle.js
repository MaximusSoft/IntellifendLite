(()=>{"use strict";var n={791:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,"body {\n  width: 100%;\n  min-height: 100vh;\n  padding: 0;\n  margin: 0;\n  font-family: sans-serif;\n}\n\n.logo_ref {\n  margin-top: 20px;\n  width: max-content;\n}\n\n.logo {\n  width: 300px;\n  height: auto;\n}\n\nh1,\nh2 {\n  font-weight: 700;\n  color: #0d102b;\n}\nh1 {\n  font-size: 24px;\n}\nh2 {\n  font-size: 20px;\n}\n\n.content {\n  height: 100vh;\n  width: calc(100% - 64px);\n  max-width: 960px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n\n.buttons-container {\n  display: flex;\n  gap: 1.2em;\n  padding: 16px 0px;\n}\n\n.button {\n  width: fit-content;\n  border: none;\n  background: #056ff0;\n  color: #fff;\n  font: inherit;\n  font-size: 88%;\n  font-weight: 600;\n  line-height: 1.2;\n  border-radius: 10px;\n  cursor: pointer;\n  margin: 0;\n  padding: 0.85em 1.7em;\n  text-align: center;\n  outline: none;\n  max-width: 180px;\n}\n\n#copy-logs-button {\n  border: 1px solid #056ff0;\n  background: transparent;\n  color: #056ff0;\n}\n\n.output_holder {\n  flex: 1;\n  min-height: 4em;\n  height: 100vh;\n  position: relative;\n  margin: 20px 0px;\n}\n\n.output {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  background: #282c34;\n  box-shadow: 0 0 1.25em rgba(0, 0, 0, 0.2);\n  border-radius: 0.7em;\n  padding: 1em 1.25em;\n  overflow: auto;\n}\n\n.output_div {\n  color: white;\n  margin: 10px;\n  white-space: pre-wrap;\n}\n\nh5 {\n  margin: 10px;\n  color: #0a98f0;\n}\n\n.result-table {\n  line-height: 20px;\n}\n\n.green {\n  color: green;\n}\n\n.red {\n  color: orangered;\n}\n\n@media (max-width: 1024px) {\n  body {\n    font-size: small;\n  }\n\n  h1,\n  h2 {\n    margin: 10px 0 10px 0;\n  }\n\n  .result-table {\n    margin-left: 0;\n    margin-right: 0;\n  }\n}\n","",{version:3,sources:["webpack://./console/style.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,iBAAiB;EACjB,UAAU;EACV,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;;EAEE,gBAAgB;EAChB,cAAc;AAChB;AACA;EACE,eAAe;AACjB;AACA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,wBAAwB;EACxB,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,mBAAmB;EACnB,WAAW;EACX,aAAa;EACb,cAAc;EACd,gBAAgB;EAChB,gBAAgB;EAChB,mBAAmB;EACnB,eAAe;EACf,SAAS;EACT,qBAAqB;EACrB,kBAAkB;EAClB,aAAa;EACb,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,cAAc;AAChB;;AAEA;EACE,OAAO;EACP,eAAe;EACf,aAAa;EACb,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,mBAAmB;EACnB,yCAAyC;EACzC,oBAAoB;EACpB,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,YAAY;EACZ,cAAc;AAChB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE;IACE,gBAAgB;EAClB;;EAEA;;IAEE,qBAAqB;EACvB;;EAEA;IACE,cAAc;IACd,eAAe;EACjB;AACF",sourcesContent:["body {\n  width: 100%;\n  min-height: 100vh;\n  padding: 0;\n  margin: 0;\n  font-family: sans-serif;\n}\n\n.logo_ref {\n  margin-top: 20px;\n  width: max-content;\n}\n\n.logo {\n  width: 300px;\n  height: auto;\n}\n\nh1,\nh2 {\n  font-weight: 700;\n  color: #0d102b;\n}\nh1 {\n  font-size: 24px;\n}\nh2 {\n  font-size: 20px;\n}\n\n.content {\n  height: 100vh;\n  width: calc(100% - 64px);\n  max-width: 960px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n\n.buttons-container {\n  display: flex;\n  gap: 1.2em;\n  padding: 16px 0px;\n}\n\n.button {\n  width: fit-content;\n  border: none;\n  background: #056ff0;\n  color: #fff;\n  font: inherit;\n  font-size: 88%;\n  font-weight: 600;\n  line-height: 1.2;\n  border-radius: 10px;\n  cursor: pointer;\n  margin: 0;\n  padding: 0.85em 1.7em;\n  text-align: center;\n  outline: none;\n  max-width: 180px;\n}\n\n#copy-logs-button {\n  border: 1px solid #056ff0;\n  background: transparent;\n  color: #056ff0;\n}\n\n.output_holder {\n  flex: 1;\n  min-height: 4em;\n  height: 100vh;\n  position: relative;\n  margin: 20px 0px;\n}\n\n.output {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  background: #282c34;\n  box-shadow: 0 0 1.25em rgba(0, 0, 0, 0.2);\n  border-radius: 0.7em;\n  padding: 1em 1.25em;\n  overflow: auto;\n}\n\n.output_div {\n  color: white;\n  margin: 10px;\n  white-space: pre-wrap;\n}\n\nh5 {\n  margin: 10px;\n  color: #0a98f0;\n}\n\n.result-table {\n  line-height: 20px;\n}\n\n.green {\n  color: green;\n}\n\n.red {\n  color: orangered;\n}\n\n@media (max-width: 1024px) {\n  body {\n    font-size: small;\n  }\n\n  h1,\n  h2 {\n    margin: 10px 0 10px 0;\n  }\n\n  .result-table {\n    margin-left: 0;\n    margin-right: 0;\n  }\n}\n"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var u=0;u<n.length;u++){var l=[].concat(n[u]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],u=r.base?c[0]+r.base:c[0],l=i[u]||0,d="".concat(u," ").concat(l);i[u]=l+1;var p=t(d),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var m=o(h,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:m,references:1})}a.push(d)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var c=r(n,o),u=0;u<i.length;u++){var l=t(i[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.nc=void 0,(()=>{var n={};t.r(n),t.d(n,{checkCefSharpWindowProperties:()=>U,checkCouchjsWindowProperties:()=>D,checkElectionAppVersion:()=>a,checkElectionUserAgent:()=>s,checkElectronProcess:()=>c,checkHeadlessAppVersion:()=>b,checkHeadlessChromeUserAgent:()=>y,checkHeadlessLanguagesLengthInconsistent:()=>E,checkHeadlessPluginsArray:()=>B,checkHeadlessPluginsInconsistent:()=>S,checkHeadlessWindowProperties:()=>x,checkNightmareWindowProperties:()=>q,checkNotificationPermissions:()=>C,checkPhantomjsErrorTrace:()=>I,checkPhantomjsFunctionBind:()=>O,checkPhantomjsUserAgent:()=>z,checkPhantomjsWindowProperties:()=>M,checkProductSub:()=>J,checkRhinoWindowProperties:()=>V,checkSeleniumDocumentAttributes:()=>R,checkSeleniumDocumentProperties:()=>T,checkSeleniumWindowProperties:()=>L,checkSlimerjsAppVersion:()=>W,checkSlimerjsUserAgent:()=>N,checkUncategorizedEvalLengthInconsistent:()=>F,checkUncategorizedMimeTypesInconsistent:()=>Y,checkWeGL:()=>P,checkWebDriver:()=>k,checkWindowExternal:()=>H,checkWindowSize:()=>j});var e=function(n,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])},e(n,t)};function r(n,e,t,r){return new(t||(t=Promise))((function(o,i){function a(n){try{c(r.next(n))}catch(n){i(n)}}function s(n){try{c(r.throw(n))}catch(n){i(n)}}function c(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(a,s)}c((r=r.apply(n,e||[])).next())}))}function o(n,e){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(c){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(n,a)}catch(n){s=[6,n],r=0}finally{t=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}}Object.create,Object.create;const i={i8:"1.0.1"};var a={anomaly:"electron_app_version",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){return n=navigator.appVersion,e.trace("electron","app_version",'navigator.appVersion must not contains "electron": '.concat(n)),[2,null!=n&&/electron/i.test(n)]}))}))}},s={anomaly:"electron_user_agent",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){return n=navigator.userAgent,e.trace("electron","user_agent",'navigator.userAgent must not contains "Electron": '.concat(n)),[2,null!=n&&/Electron/i.test(n)]}))}))}},c={anomaly:"electron_process",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n,t,r;return o(this,(function(o){return void 0===window.process?(e.trace("electron","electron_process","window.process is undefined"),[2,!1]):(n=window.process,e.trace("electron","electron_process","window.process.versions.electron must not be null: ".concat(null===(t=n.versions)||void 0===t?void 0:t.electron)),[2,"renderer"===n.type||null!=(null===(r=n.versions)||void 0===r?void 0:r.electron)])}))}))}},u=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}(t,n),t}(Error);function l(n,e){return-1!==n.indexOf(e)}function d(n,e){return-1!==n.indexOf(e)}function p(n){return Object.getOwnPropertyNames(n)}function h(n){for(var e=[],t=1;t<arguments.length;t++)e[t-1]=arguments[t];for(var r=function(e){if("string"==typeof e){if(l(n,e))return{value:!0}}else if(null!=function(n,e){if("find"in n)return n.find(e);for(var t=0;t<n.length;t++)if(e(n[t]))return n[t]}(n,(function(n){return e.test(n)})))return{value:!0}},o=0,i=e;o<i.length;o++){var a=r(i[o]);if("object"==typeof a)return a.value}return!1}function m(n){return n.reduce((function(n,e){return n+(e?1:0)}),0)}function f(){var n,e,t=window,r=navigator;return m(["webkitPersistentStorage"in r,"webkitTemporaryStorage"in r,0===r.vendor.indexOf("Google"),"webkitResolveLocalFileSystemURL"in t,"BatteryManager"in t,"webkitMediaStream"in t,"webkitSpeechGrammar"in t])>=5?"chromium":m(["ApplePayError"in t,"CSSPrimitiveValue"in t,"Counter"in t,0===r.vendor.indexOf("Apple"),"getStorageUpdates"in r,"WebKitMediaKeys"in t])>=4?"webkit":m(["buildID"in navigator,"MozAppearance"in(null!==(e=null===(n=document.documentElement)||void 0===n?void 0:n.style)&&void 0!==e?e:{}),"onmozfullscreenchange"in t,"mozInnerScreenX"in t,"CSSMozDocumentRule"in t,"CanvasCaptureMediaStream"in t])>=4?"gecko":"unknown"}function v(){var n,e=null===(n=navigator.userAgent)||void 0===n?void 0:n.toLowerCase();return d(e,"wechat")?"wechat":d(e,"firefox")?"firefox":d(e,"opera")||d(e,"opr")?"opera":d(e,"chrome")?"chrome":d(e,"safari")?"safari":d(e,"trident")||d(e,"msie")?"ie":"unknown"}function g(){var n=f(),e="chromium"===n,t="gecko"===n;if(!e&&!t)return!1;var r=window;return m(["onorientationchange"in r,"orientation"in r,e&&!("SharedWorker"in r),t&&/android/i.test(navigator.appVersion)])>=2}function A(){if("webkit"!==f())return!1;var n=window;return m(["safari"in n,!("DeviceMotionEvent"in n),!("ongestureend"in n),!("standalone"in navigator)])>=3}function w(){if(void 0===window.CSS)throw new u("window.CSS is undefined");return CSS.supports("-moz-appearance","auto")}function _(){return void 0!==document.hasFocus&&document.hasFocus()}var b={anomaly:"headless_app_version",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){return n=navigator.appVersion,e.trace("headless_chrome","app_version",'navigator.appVersion must not contains "headless": '.concat(n)),[2,null!=n&&/headless/i.test(n)]}))}))}},y={anomaly:"headless_user_agent",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){return n=navigator.userAgent,e.trace("headless_chrome","user_agent",'navigator.userAgent must not contains "Headless": '.concat(n)),[2,null!=n&&/Headless/i.test(n)]}))}))}},E={anomaly:"headless_languages_length_inconsistent",handler:function(n){var e=n.log,t=n.browserCore;return r(void 0,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){var a;return n=[],void 0!==(r=navigator.language||navigator.userLanguage||navigator.browserLanguage||navigator.systemLanguage)&&n.push([r]),Array.isArray(navigator.languages)?"chromium"===t&&m([!("MediaSettingsRange"in(a=window)),"RTCEncodedAudioFrame"in a,""+a.Intl=="[object Intl]",""+a.Reflect=="[object Reflect]"])>=3||n.push(navigator.languages):"string"==typeof navigator.languages&&(i=navigator.languages)&&n.push(i.split(",")),e.trace("headless_chrome","languages_length_inconsistent","navigator.languages must contain an value: ".concat(JSON.stringify(n))),[2,0==n.length]}))}))}},C={anomaly:"notification_permissions",handler:function(n){var e=n.log,t=n.browser;return r(void 0,void 0,void 0,(function(){var n,r;return o(this,(function(o){switch(o.label){case 0:if("chrome"!=t)return e.trace("headless_chrome","notification_permissions","browser is not Chrome"),[2,!1];if(void 0===window.Notification)return e.trace("headless_chrome","notification_permissions","window.Notification is undefined"),[2,!1];if(void 0===navigator.permissions)return e.trace("headless_chrome","notification_permissions","navigator.permissions is undefined"),[2,!1];if("function"!=typeof(n=navigator.permissions).query)return e.trace("headless_chrome","notification_permissions","navigator.permissions.query is not a function"),[2,!1];o.label=1;case 1:return o.trys.push([1,3,,4]),[4,n.query({name:"notifications"})];case 2:return r=o.sent(),e.trace("headless_chrome","notification_permissions","permissionStatus must not be prompt: ".concat(JSON.stringify(r))),[2,"denied"===window.Notification.permission&&"prompt"===r.state];case 3:return o.sent(),e.trace("headless_chrome","notification_permissions","notificationPermissions signal unexpected behaviour"),[2,!1];case 4:return[2]}}))}))}},x={anomaly:"headless_window_properties",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n,t;return o(this,(function(r){return n=p(window),t=h(n,"webdriver","domAutomation","domAutomationController"),e.trace("headless_chrome","headless_window_properties",'window properties must not contain "webdriver", "domAutomation", "domAutomationController": '.concat(t)),[2,t]}))}))}},B={anomaly:"plugins_array",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){return o(this,(function(n){return void 0===navigator.plugins?(e.trace("headless_chrome","plugins_array","navigator.plugins is undefined"),[2,!1]):void 0===window.PluginArray?(e.trace("headless_chrome","plugins_array","window.PluginArray is undefined"),[2,!1]):(e.trace("headless_chrome","plugins_array","type of navigator.plugins must be PluginArray"),[2,!(navigator.plugins instanceof PluginArray)])}))}))}},S={anomaly:"plugins_inconsistent",handler:function(n){var e=n.log,t=n.browserCore;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(r){return void 0===navigator.plugins?(e.trace("headless_chrome","plugins_inconsistent","navigator.plugins is undefined"),[2,!1]):(n=navigator.plugins.length,"chromium"===t&&g()||"webkit"===t&&!A()?(e.trace("headless_chrome","plugins_inconsistent","browserCore is Chromium in Android; or Webkit in iOS"),[2,!1]):[2,0===n])}))}))}},k={anomaly:"web_driver",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){return o(this,(function(n){return null==navigator.webdriver&&e.trace("headless_chrome","web_driver","navigator.webdriver is undefined"),e.trace("headless_chrome","web_driver","navigator.webdriver must be undefined: ".concat(navigator.webdriver)),[2,null!=navigator.webdriver&&null!=navigator.webdriver&&0!=navigator.webdriver]}))}))}},j={anomaly:"window_size",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){return n={outerWidth:window.outerWidth,outerHeight:window.outerHeight,innerWidth:window.innerWidth,innerHeight:window.innerHeight},_()?(e.trace("headless_chrome","window_size","window.outerWidth or sizes.outerHeight must not be 0"),[2,0===n.outerWidth&&0===n.outerHeight]):(e.trace("headless_chrome","window_size","document.hasFocus is undefined or returns false"),[2,!1])}))}))}},P={anomaly:"webgl",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n,t,r,i;return o(this,(function(o){return"function"!=typeof(n=document.createElement("canvas")).getContext?(e.trace("headless_chrome","webgl","HTMLCanvasElement.getContext is not a function"),[2,!1]):null===(t=n.getContext("webgl"))?(e.trace("headless_chrome","webgl","WebGLRenderingContext is null"),[2,!1]):"function"!=typeof t.getParameter?(e.trace("headless_chrome","webgl","WebGLRenderingContext.getParameter is not a function"),[2,!1]):(r=t.getParameter(t.VENDOR),i=t.getParameter(t.RENDERER),e.trace("headless_chrome","webgl",'WebGLRenderingContext.Parameters{VENDOR,RENDERER} must not be {"Brian Paul","Mesa OffScreen"}: '.concat(r,", ").concat(i)),[2,"Brian Paul"==r&&"Mesa OffScreen"==i])}))}))}},O={anomaly:"no_function_bind",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){return o(this,(function(n){return e.trace("phantomjs","function_bind","Property Function.prototype.bind is underfined"),[2,void 0===Function.prototype.bind]}))}))}},z={anomaly:"phantomjs_user_agent",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){return n=navigator.userAgent,e.trace("phantomjs","user_agent",'navigator.userAgent must not contains "PhantomJS": '.concat(n)),[2,null!=n&&/PhantomJS/i.test(n)]}))}))}},I={anomaly:"phantomjs_error_trace",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){n=null;try{null[0]()}catch(e){e instanceof Error&&null!=e.stack&&(n=e.stack.toString())}return e.trace("phantomjs","error_trace","errorTrace signal unexpected behaviour: ".concat(n)),[2,null!=n&&/PhantomJS/i.test(n)]}))}))}},M={anomaly:"phantomjs_window_properties",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n,t;return o(this,(function(r){return n=p(window),t=h(n,"callPhantom","_phantom"),e.trace("phantomjs","phantomjs_window_properties","window properties must not contain 'callPhantom', '_phantom': ".concat(t)),[2,t]}))}))}},W={anomaly:"slimerjs_app_version",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){return n=navigator.appVersion,e.trace("slimerjs","app_version",'navigator.appVersion must not contains "slimerjs": '.concat(n)),[2,null!=n&&/slimerjs/i.test(n)]}))}))}},N={anomaly:"slimerjs_user_agent",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){return n=navigator.userAgent,e.trace("slimerjs","user_agent",'navigator.userAgent must not contains "slimerjs": '.concat(n)),[2,null!=n&&/slimerjs/i.test(n)]}))}))}},R={anomaly:"selenium_document_attributes",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){return void 0===document.documentElement?(e.trace("selenium","document_attributes","document.documentElement is undefined"),[2,!1]):"function"!=typeof(n=document.documentElement).getAttributeNames?(e.trace("selenium","document_attributes","document.documentElement.getAttributeNames is not a function"),[2,!1]):(e.trace("selenium","document_attributes",'document.documentElement.getAttributeNames must contains "selenium": '.concat(JSON.stringify(n.getAttributeNames()))),[2,h(n.getAttributeNames(),"selenium","webdriver","driver")])}))}))}},T={anomaly:"selenium_document_properties",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){return void 0===window.document?(e.trace("selenium","document_properties","window.document is undefined"),[2,!1]):(n=p(window.document),e.trace("selenium","document_properties",'window.document must contains "selenium": '.concat(JSON.stringify(n))),[2,h(n,"selenium","__fxdriver_unwrapped","__selenium_unwrapped","__webdriver_evaluate","__driver_evaluate","__webdriver_unwrapped","__driver_unwrapped","__selenium_evaluate","__webdriver_script_function","__webdriver_script_func","__webdriver_script_fn","__fxdriver_evaluate","__webdriverFunc","$chrome_asyncScriptInfo","__$webdriverAsyncExecutor","__lastWatirAlert","__lastWatirConfirm","__lastWatirPrompt","_WEBDRIVER_ELEM_CACHE","ChromeDriverw","selenium-evaluate","_Selenium_IDE_Recorder",/^([a-z]){3}_.*_(Array|Promise|Symbol)$/)])}))}))}},L={anomaly:"selenium_window_properties",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n,t;return o(this,(function(r){return n=p(window),t=h(n,"_selenium","_Selenium_IDE_Recorder","callSelenium"),e.trace("selenium","selenium_window_properties","window properties must not contain '_selenium', '_Selenium_IDE_Recorder', 'callSelenium': ".concat(t)),[2,t]}))}))}},H={anomaly:"window_external",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){return void 0===window.external?(e.trace("sequentum","window_external","window.external is undefined"),[2,!1]):"function"!=typeof(n=window.external).toString?(e.trace("sequentum","window_external","window.external.toString is not a function"),[2,!1]):(e.trace("sequentum","window_external",'window.external.toString() must not contains "Sequentum": '.concat(n.toString())),[2,/Sequentum/i.test(n.toString())])}))}))}},q={anomaly:"nightmare_window_properties",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n,t;return o(this,(function(r){return n=p(window),t=h(n,"__nightmare"),e.trace("nightmare","nightmare_window_properties","window properties must not contain '__nightmare': ".concat(t)),[2,t]}))}))}},D={anomaly:"couchjs_window_properties",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n,t;return o(this,(function(r){return n=p(window),t=h(n,"emit"),e.trace("couchjs","couchjs_window_properties","window properties must not contain 'emit': ".concat(t)),[2,t]}))}))}},U={anomaly:"cefsharp_window_properties",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n,t;return o(this,(function(r){return n=p(window),t=h(n,"CefSharp"),e.trace("cefsharp","cefsharp_window_properties","window properties must not contain 'CefSharp': ".concat(t)),[2,t]}))}))}},V={anomaly:"rhino_window_properties",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n,t;return o(this,(function(r){return n=p(window),t=h(n,"spawn"),e.trace("rhino","rhino_window_properties","window properties must not contain 'spawn': ".concat(t)),[2,t]}))}))}},Y={anomaly:"mime_types_inconsistent",handler:function(n){var e=n.log;return r(void 0,void 0,void 0,(function(){var n,t,r;return o(this,(function(o){if(n=null,void 0===navigator.mimeTypes)n=void 0;else for(t=navigator.mimeTypes,n=Object.getPrototypeOf(t)===MimeTypeArray.prototype,r=0;r<t.length;r++)n&&(n=Object.getPrototypeOf(t[r])===MimeType.prototype);return e.trace("uncategorized","mime_types_inconsistent","navigator.mimeTypes data type is inconsistent: ".concat(n)),[2,0==n]}))}))}},F={anomaly:"eval_length_inconsistency",handler:function(n){var e=n.log,t=n.browser,i=n.browserCore;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(r){n=null;try{n=eval.toString().length}catch(n){console.error(n)}return e.trace("uncategorized","eval_length_inconsistent","eval.toString().length is inconsistent: ".concat(n)),[2,37===length&&!l(["webkit","gecko"],i)||39===length&&!l(["ie"],t)||33===length&&!l(["chromium"],i)]}))}))}},J={anomaly:"product_sub",handler:function(n){var e=n.log,t=n.browser;return r(void 0,void 0,void 0,(function(){var n;return o(this,(function(r){return void 0===(n=navigator.productSub)?(e.trace("uncategorized","product_sub","navigator.productSub is undefined"),[2,!1]):(e.trace("uncategorized","product_sub",'navigator.productSub must not be "20030107": '.concat(n)),[2,("chrome"===t||"safari"===t||"opera"===t||"wechat"===t)&&"20030107"!==n])}))}))}};function Z(n,e){return e instanceof Map?Object.fromEntries(Array.from(e.entries())):e}var G=function(){function n(){this.tree=new Map}return n.prototype.trace=function(n,e,t){this.tree.set(n,this.tree.get(n)||new Map);var r=this.tree.get(n);r.set(e,r.get(e)||[]),r.get(e).push(t)},n.prototype.read=function(){return JSON.stringify(this.tree,Z,4)},n}(),X=new Map([["headless_languages_length_inconsistent","headless_chrome"],["headless_user_agent","headless_chrome"],["electron_user_agent","electron"],["slimerjs_user_agent","slimerjs"],["headless_app_version","headless_chrome"],["electron_app_version","electron"],["slimerjs_app_version","slimerjs"],["plugins_array","headless_chrome"],["plugins_inconsistent","headless_chrome"],["selenium_document_attributes","selenium"],["selenium_document_properties","selenium"],["no_function_bind","phantomjs"],["phantomjs_error_trace","phantomjs"],["mime_types_inconsistent","uncategorized"],["eval_length_inconsistency","uncategorized"],["notification_permissions","headless_chrome"],["electron_process","electron"],["product_sub","uncategorized"],["rtt","headless_chrome"],["web_driver","headless_chrome"],["webgl","headless_chrome"],["window_external","sequentum"],["headless_window_properties","headless_chrome"],["selenium_window_properties","selenium"],["phantomjs_window_properties","phantomjs"],["nightmare_window_properties","nightmare"],["couchjs_window_properties","couchjs"],["rhino_window_properties","rhino"],["cefsharp_window_properties","cefsharp"],["window_size","headless_chrome"]]);const $=function(){function e(){}return e.prototype.evaluate=function(){return r(this,void 0,void 0,(function(){var n,e,t,r,i,a,s,c,u,l,d;return o(this,(function(o){switch(o.label){case 0:n=[],e={log:new G,browser:v(),browserCore:f()},t=0,r=this.getCheckers(),o.label=1;case 1:if(!(t<r.length))return[3,6];i=r[t],o.label=2;case 2:return o.trys.push([2,4,,5]),s=(a=n).push,d={},[4,i.handler(e)];case 3:return s.apply(a,[(d.violated=o.sent(),d.anomaly=i.anomaly,d)]),[3,5];case 4:return c=o.sent(),console.error(c),[3,5];case 5:return t++,[3,1];case 6:return u=n.filter((function(n){return n.violated})).map((function(n){return e=n.anomaly,X.get(e)||"uncategorized";var e})).reduce((function(n,e){return h(n,e)||n.push(e),n}),[]),l=e.log.read(),[2,{checks:n,bots:u,isBot:u.length>0,trace:l}]}}))}))},e.prototype.getCheckers=function(){return Object.values(n)},e}();function K(n){var e=(void 0===n?{}:n).reporting,t=void 0!==e&&e;return r(this,void 0,void 0,(function(){return o(this,(function(n){return t&&function(){try{var n=new XMLHttpRequest;n.open("get","https://cdn.intellifend.com/lite/install-monitoring?v=".concat(i.i8),!0),n.send()}catch(n){console.error(n)}}(),[2,new $]}))}))}var Q=t(379),nn=t.n(Q),en=t(795),tn=t.n(en),rn=t(569),on=t.n(rn),an=t(565),sn=t.n(an),cn=t(216),un=t.n(cn),ln=t(589),dn=t.n(ln),pn=t(791),hn={};hn.styleTagTransform=dn(),hn.setAttributes=sn(),hn.insert=on().bind(null,"head"),hn.domAPI=tn(),hn.insertStyleElement=un(),nn()(pn.Z,hn),pn.Z&&pn.Z.locals&&pn.Z.locals;var mn=function(){return r(void 0,void 0,void 0,(function(){var n,e,t,r,i,a,s,c,u,l,d,p,h;return o(this,(function(o){switch(o.label){case 0:n=document.getElementById("status"),e=document.getElementById("error_section"),t=document.getElementById("result_section"),r=document.getElementById("error"),i=document.getElementById("time-spent"),a=document.getElementById("evaluation"),s=document.getElementById("debug-data"),c=document.getElementById("trace-data"),n.textContent="Loading...",e.style.display="none",t.style.display="none",o.label=1;case 1:return o.trys.push([1,4,,5]),u=performance.now(),[4,K()];case 2:return[4,o.sent().evaluate()];case 3:return l=o.sent(),d=(performance.now()-u).toFixed(0)+" ms",e.style.display="none",t.style.display="block",i.textContent=d,a.textContent=JSON.stringify({isBot:l.isBot,botCategories:l.bots,botAnomalies:l.checks},null,4),p={browserCore:f(),browser:v(),documentFocus:_(),mozAppearanceSupport:w(),isAndroid:g(),isDesktopSafari:A()},s.textContent=JSON.stringify(p,null,4),c.textContent=l.trace,n.innerHTML="Result: "+(l.isBot?"<span class='red'>Bot detected</span>":"<span class='green'>Normal</span>"),[3,5];case 4:return h=o.sent(),console.error(h),t.style.display="none",e.style.display="block",n.textContent="Error!",r.textContent=JSON.stringify(h,Object.getOwnPropertyNames(h),4),[3,5];case 5:return[2]}}))}))};window.onload=function(){return r(void 0,void 0,void 0,(function(){return o(this,(function(n){return document.getElementById("evaluate-button").addEventListener("click",mn),document.getElementById("copy-trace-button").addEventListener("click",(function(){navigator.clipboard.writeText(JSON.stringify(void 0)).then((function(){alert("Copied to clipboard")}))})),mn(),[2]}))}))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,